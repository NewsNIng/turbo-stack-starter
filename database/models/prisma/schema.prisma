//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// index.prisma
//

generator client {
  provider = "prisma-client-js"
  // binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//
// user.prisma
//

// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? @db.Text
//     access_token      String? @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
//     @@index([userId], map: "Account_userId_fkey")
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@index([userId], map: "Session_userId_fkey")
// }

// model User {
//     id                 String    @id @default(cuid())
//     name               String?
//     email              String?   @unique
//     emailVerified      DateTime?
//     image              String?
//     password           String?
//     guided             Int       @default(0) @db.TinyInt
//     company            String    @default("")
//     country            String    @default("")
//     industry           String    @default("")
//     firstName          String?
//     lastName           String?
//     generationLanguage String?   @default("English") @db.VarChar(32)
//     timeZone           String?   @db.VarChar(32)
//     date_created       DateTime? @default(now()) @db.DateTime(0)
//     date_updated       DateTime? @default(now()) @db.DateTime(0)
//     deviceId           String?   @unique(map: "deviceId_UNIQUE") @db.VarChar(128)
//     complete_trial     Boolean   @default(false)

//     accounts Account[]
//     sessions Session[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

model User {
  id    String  @id @default(cuid())
  email String  @unique
  name  String?
}
